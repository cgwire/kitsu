{"version":3,"file":"StatusAutomations-BYHHHcFX.js","sources":["../../src/components/modals/EditStatusAutomationModal.vue","../../src/components/pages/StatusAutomations.vue"],"sourcesContent":["<template>\n  <div\n    :class=\"{\n      modal: true,\n      'is-active': active\n    }\"\n  >\n    <div class=\"modal-background\" @click=\"$emit('cancel')\"></div>\n\n    <div class=\"modal-content\">\n      <div class=\"box\">\n        <h1 class=\"title\" v-if=\"isEditing\">\n          {{ $t('status_automations.edit_title') }}\n        </h1>\n        <h1 class=\"title\" v-else>\n          {{ $t('status_automations.new_status_automation') }}\n        </h1>\n\n        <form @submit.prevent>\n          <h3 class=\"subtitle\">{{ $t('status_automations.entity_title') }}</h3>\n          <combobox\n            :label=\"$t('status_automations.fields.entity_type')\"\n            :options=\"entityTypeOptions\"\n            locale-key-prefix=\"status_automations.entity_types.\"\n            @enter=\"confirmClicked\"\n            v-model=\"form.entityType\"\n            v-if=\"!isEditing\"\n          />\n          <span class=\"entity-type-name\" v-else> {{ form.entityType }} </span>\n\n          <h2 class=\"subtitle\">{{ $t('status_automations.in_title') }}</h2>\n\n          <div class=\"flexrow\">\n            <combobox-task-type\n              class=\"flexrow-item\"\n              :label=\"$t('status_automations.fields.in_task_type')\"\n              :task-type-list=\"\n                form.inEntityTaskTypes.filter(({ archived }) => !archived)\n              \"\n              v-model=\"form.inTaskTypeId\"\n              @enter=\"confirmClicked\"\n            />\n\n            <combobox-status\n              class=\"flexrow-item\"\n              :label=\"$t('status_automations.fields.in_task_status')\"\n              :task-status-list=\"taskStatusList\"\n              v-model=\"form.inTaskStatusId\"\n              @enter=\"confirmClicked\"\n            />\n          </div>\n\n          <h2 class=\"subtitle\">{{ $t('status_automations.out_title') }}</h2>\n\n          <div class=\"flexrow\">\n            <combobox\n              class=\"flexrow-item margin-fix\"\n              :label=\"$t('status_automations.fields.out_field_type')\"\n              :options=\"fieldTypeOptions\"\n              locale-key-prefix=\"status_automations.field_types.\"\n              @enter=\"confirmClicked\"\n              v-model=\"form.outFieldType\"\n              v-if=\"!isEditing && form.entityType === 'asset'\"\n            />\n            <span\n              class=\"flexrow-item\"\n              v-if=\"isEditing && form.outFieldType === 'ready_for'\"\n            >\n              {{ $t('status_automations.field_types.ready_for') }}\n            </span>\n\n            <combobox-task-type\n              class=\"flexrow-item\"\n              :label=\"$t('status_automations.fields.out_task_type')\"\n              :task-type-list=\"\n                form.outEntityTaskTypes.filter(({ archived }) => !archived)\n              \"\n              :open-top=\"true\"\n              @enter=\"confirmClicked\"\n              v-model=\"form.outTaskTypeId\"\n            />\n\n            <combobox-status\n              class=\"flexrow-item\"\n              :label=\"$t('status_automations.fields.out_task_status')\"\n              :task-status-list=\"taskStatusList\"\n              :open-top=\"true\"\n              @enter=\"confirmClicked\"\n              v-model=\"form.outTaskStatusId\"\n              v-if=\"form.outFieldType === 'status'\"\n            />\n          </div>\n\n          <combobox-boolean\n            :label=\"$t('status_automations.fields.import_last_revision')\"\n            @enter=\"confirmClicked\"\n            v-model=\"form.importLastRevision\"\n          />\n\n          <combobox-boolean\n            :label=\"$t('main.archived')\"\n            @enter=\"confirmClicked\"\n            v-model=\"form.archived\"\n            v-if=\"isEditing\"\n          />\n        </form>\n\n        <modal-footer\n          :error-text=\"$t('status_automations.create_error')\"\n          :is-error=\"isError\"\n          @confirm=\"confirmClicked\"\n          @cancel=\"$emit('cancel')\"\n        />\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapGetters } from 'vuex'\n\nimport { modalMixin } from '@/components/modals/base_modal'\n\nimport Combobox from '@/components/widgets/Combobox.vue'\nimport ComboboxBoolean from '@/components/widgets/ComboboxBoolean.vue'\nimport ComboboxStatus from '@/components/widgets/ComboboxStatus.vue'\nimport ComboboxTaskType from '@/components/widgets/ComboboxTaskType.vue'\nimport ModalFooter from '@/components/modals/ModalFooter.vue'\n\nexport default {\n  name: 'edit-status-automation-modal',\n\n  mixins: [modalMixin],\n\n  components: {\n    Combobox,\n    ComboboxBoolean,\n    ComboboxStatus,\n    ComboboxTaskType,\n    ModalFooter\n  },\n\n  props: {\n    active: {\n      type: Boolean,\n      default: false\n    },\n    isError: {\n      type: Boolean,\n      default: false\n    },\n    isLoading: {\n      type: Boolean,\n      default: false\n    },\n    statusAutomationToEdit: {\n      type: Object,\n      default: () => {}\n    },\n    taskStatus: {\n      type: Object,\n      default: () => {}\n    }\n  },\n\n  emits: ['cancel', 'confirm'],\n\n  data() {\n    return {\n      entityTypeOptions: [\n        {\n          label: 'asset',\n          value: 'asset'\n        },\n        {\n          label: 'shot',\n          value: 'shot'\n        }\n      ],\n      fieldTypeOptions: [\n        {\n          label: 'status',\n          value: 'status'\n        },\n        {\n          label: 'ready_for',\n          value: 'ready_for'\n        }\n      ],\n      form: {\n        entityType: 'asset',\n        outFieldType: 'status',\n        inEntityTaskTypes: [],\n        outEntityTaskTypes: [],\n        inTaskTypeId: '',\n        outTaskTypeId: '',\n        inTaskStatusId: '',\n        outTaskStatusId: '',\n        importLastRevision: 'false',\n        archived: 'false'\n      }\n    }\n  },\n\n  computed: {\n    ...mapGetters([\n      'statusAutomations',\n      'statusAutomationsStatusOptions',\n      'assetTaskTypes',\n      'shotTaskTypes',\n      'taskStatuses'\n    ]),\n\n    taskStatusList() {\n      return this.taskStatuses.filter(status => !status.for_concept)\n    },\n\n    isEditing() {\n      return this.statusAutomationToEdit?.id\n    }\n  },\n\n  methods: {\n    confirmClicked() {\n      this.$emit('confirm', this.form)\n    },\n\n    setTaskTypes(fieldType) {\n      if (fieldType === 'asset') {\n        this.form.inEntityTaskTypes = this.assetTaskTypes\n        if (this.form.outFieldType === 'status') {\n          this.form.outEntityTaskTypes = this.assetTaskTypes\n        } else {\n          this.form.outEntityTaskTypes = this.shotTaskTypes\n        }\n      } else if (fieldType === 'shot') {\n        this.form.inEntityTaskTypes = this.shotTaskTypes\n        this.form.outFieldType = 'status'\n        this.form.outEntityTaskTypes = this.shotTaskTypes\n      }\n    }\n  },\n\n  watch: {\n    statusAutomationToEdit() {\n      if (this.statusAutomationToEdit) {\n        let entityTaskTypes = []\n        if (this.form.entityType === 'asset') {\n          entityTaskTypes = this.assetTaskTypes\n        } else if (this.form.entityType === 'shot') {\n          entityTaskTypes = this.shotTaskTypes\n        }\n        this.form = {\n          entityType: this.isEditing\n            ? this.statusAutomationToEdit.entity_type\n            : 'asset',\n          inEntityTaskTypes: entityTaskTypes,\n          outEntityTaskTypes: entityTaskTypes,\n          inTaskTypeId: this.isEditing\n            ? this.statusAutomationToEdit.in_task_type_id\n            : entityTaskTypes[0].id,\n          inTaskStatusId: this.isEditing\n            ? this.statusAutomationToEdit.in_task_status_id\n            : this.taskStatusList[0].id,\n          outFieldType: this.isEditing\n            ? this.statusAutomationToEdit.out_field_type\n            : 'status',\n          outTaskTypeId: this.isEditing\n            ? this.statusAutomationToEdit.out_task_type_id\n            : entityTaskTypes[1].id,\n          outTaskStatusId: this.isEditing\n            ? this.statusAutomationToEdit.out_task_status_id\n            : this.taskStatusList[1].id,\n          importLastRevision: this.isEditing\n            ? String(this.statusAutomationToEdit.import_last_revision === true)\n            : 'false',\n          archived: this.isEditing\n            ? String(this.statusAutomationToEdit.archived === true)\n            : 'false'\n        }\n      }\n    },\n\n    // Adapt available values to the entity type\n    'form.entityType': function (entityType) {\n      this.setTaskTypes(entityType)\n      if (!this.isEditing) {\n        this.form.inTaskTypeId = this.form.inEntityTaskTypes[0].id\n        this.form.inTaskStatusId = this.taskStatusList[0].id\n        this.form.outTaskTypeId = this.form.outEntityTaskTypes[1].id\n        this.form.outTaskStatusId = this.taskStatusList[1].id\n      }\n    },\n\n    // Adapt available values to the automation type\n    // * Ready for apply to assets\n    // * Status apply to the same entity.\n    'form.outFieldType': function (outFieldType) {\n      if (outFieldType === 'ready_for') {\n        this.form.outEntityTaskTypes = this.shotTaskTypes\n        this.form.outTaskTypeId = this.shotTaskTypes[1].id\n      } else if (outFieldType === 'status') {\n        this.setTaskTypes(this.form.entityType)\n        this.form.outTaskTypeId = this.form.outEntityTaskTypes[1].id\n      }\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.margin-fix {\n  margin-top: 5px;\n}\n.subtitle {\n  font-size: 1.4em;\n  margin-top: 2em;\n  margin-bottom: 0.5em;\n  text-transform: none;\n}\n.entity-type-name {\n  font-size: 1.2em;\n  text-transform: capitalize;\n}\n</style>\n","<template>\n  <div class=\"status-automations page fixed-page\">\n    <list-page-header\n      :title=\"$t('status_automations.title')\"\n      :new-entry-label=\"$t('status_automations.new_status_automation')\"\n      :is-exportable=\"isActiveTab\"\n      @export-clicked=\"onExportClicked\"\n      @new-clicked=\"onNewClicked\"\n    />\n\n    <route-tabs class=\"mt2\" :active-tab=\"activeTab\" :tabs=\"tabs\" />\n\n    <status-automation-list\n      class=\"status-automation-list\"\n      :entries=\"statusAutomationsList\"\n      :is-editable=\"true\"\n      :is-loading=\"loading.list\"\n      :is-error=\"errors.list\"\n      @edit-clicked=\"onEditClicked\"\n      @delete-clicked=\"onDeleteClicked\"\n    />\n\n    <edit-status-automation-modal\n      :active=\"modals.edit\"\n      :is-loading=\"loading.edit\"\n      :is-error=\"errors.edit\"\n      :status-automation-to-edit=\"statusAutomationToEdit\"\n      @cancel=\"modals.edit = false\"\n      @confirm=\"confirmEditStatusAutomation\"\n    />\n\n    <delete-modal\n      :active=\"modals.del\"\n      :is-loading=\"loading.del\"\n      :is-error=\"errors.del\"\n      :text=\"deleteText\"\n      :error-text=\"$t('status_automations.delete_error')\"\n      @cancel=\"modals.del = false\"\n      @confirm=\"confirmDeleteStatusAutomation\"\n    />\n  </div>\n</template>\n\n<script>\nimport { mapGetters, mapActions } from 'vuex'\n\nimport csv from '@/lib/csv'\nimport stringHelpers from '@/lib/string'\n\nimport DeleteModal from '@/components/modals/DeleteModal.vue'\nimport EditStatusAutomationModal from '@/components/modals/EditStatusAutomationModal.vue'\nimport ListPageHeader from '@/components/widgets/ListPageHeader.vue'\nimport RouteTabs from '@/components/widgets/RouteTabs.vue'\nimport StatusAutomationList from '@/components/lists/StatusAutomationList.vue'\n\nexport default {\n  name: 'status-automations',\n\n  components: {\n    DeleteModal,\n    EditStatusAutomationModal,\n    ListPageHeader,\n    RouteTabs,\n    StatusAutomationList\n  },\n\n  data() {\n    return {\n      activeTab: 'active',\n      modals: {\n        edit: false,\n        del: false\n      },\n      loading: {\n        edit: false,\n        del: false,\n        list: false\n      },\n      errors: {\n        edit: false,\n        del: false,\n        list: false\n      },\n      tabs: [\n        {\n          name: 'active',\n          label: this.$t('main.active')\n        },\n        {\n          name: 'archived',\n          label: this.$t('main.archived')\n        }\n      ],\n      statusAutomationToDelete: null,\n      statusAutomationToEdit: null\n    }\n  },\n\n  computed: {\n    ...mapGetters([\n      'statusAutomations',\n      'archivedStatusAutomations',\n      'taskStatusMap',\n      'taskTypeMap'\n    ]),\n\n    isActiveTab() {\n      return this.activeTab === 'active'\n    },\n\n    statusAutomationsList() {\n      return this.isActiveTab\n        ? this.statusAutomations\n        : this.archivedStatusAutomations\n    },\n\n    deleteText() {\n      const statusAutomation = this.statusAutomationToDelete\n      if (statusAutomation) {\n        return this.$t('custom_actions.delete_text', {\n          name: statusAutomation.name\n        })\n      } else {\n        return ''\n      }\n    }\n  },\n\n  async created() {\n    this.activeTab = this.$route.query.tab || 'active'\n    this.loading.list = true\n    this.errors.list = false\n    try {\n      await this.loadStatusAutomations()\n    } catch (err) {\n      this.errors.list = true\n    } finally {\n      this.loading.list = false\n    }\n  },\n\n  methods: {\n    ...mapActions([\n      'deleteStatusAutomation',\n      'editStatusAutomation',\n      'loadTaskStatuses',\n      'loadStatusAutomations',\n      'newStatusAutomation'\n    ]),\n\n    confirmEditStatusAutomation(form) {\n      let action = 'newStatusAutomation'\n      if (this.statusAutomationToEdit && this.statusAutomationToEdit.id) {\n        action = 'editStatusAutomation'\n        form.id = this.statusAutomationToEdit.id\n      }\n\n      this.loading.edit = true\n      this.errors.edit = false\n      this[action](form)\n        .then(() => {\n          this.loading.edit = false\n          this.modals.edit = false\n        })\n        .catch(err => {\n          console.error(err)\n          this.errors.edit = true\n          this.loading.edit = false\n        })\n    },\n\n    confirmDeleteStatusAutomation() {\n      this.loading.del = true\n      this.errors.del = false\n      this.deleteStatusAutomation(this.statusAutomationToDelete)\n        .then(() => {\n          this.loading.del = false\n          this.modals.del = false\n        })\n        .catch(err => {\n          console.error(err)\n          this.errors.del = true\n          this.loading.del = false\n        })\n    },\n\n    onExportClicked() {\n      const name = stringHelpers.slugify(this.$t('status_automations.title'))\n      const headers = [\n        this.$t('main.type'),\n        this.$t('status_automations.fields.entity_type'),\n        this.$t('status_automations.fields.in_task_type'),\n        this.$t('status_automations.fields.in_task_status'),\n        this.$t('status_automations.fields.out_field_type'),\n        this.$t('status_automations.fields.out_task_type'),\n        this.$t('status_automations.fields.out_task_status'),\n        this.$t('status_automations.fields.import_last_revision')\n      ]\n      const entries = [headers].concat(\n        this.statusAutomations.map(statusAutomation => [\n          statusAutomation.type,\n          statusAutomation.entity_type,\n          this.taskTypeMap.get(statusAutomation.in_task_type_id)?.name,\n          this.taskStatusMap.get(statusAutomation.in_task_status_id)\n            ?.short_name,\n          statusAutomation.out_field_type === 'ready_for'\n            ? this.$t('status_automations.change_ready_for')\n            : this.$t('status_automations.change_status'),\n          this.taskTypeMap.get(statusAutomation.out_task_type_id)?.name,\n          statusAutomation.out_field_type === 'status'\n            ? this.taskStatusMap.get(statusAutomation.out_task_status_id)\n                ?.short_name\n            : undefined,\n          statusAutomation.import_last_revision\n        ])\n      )\n      csv.buildCsvFile(name, entries)\n    },\n\n    onNewClicked() {\n      this.statusAutomationToEdit = {}\n      this.errors.edit = false\n      this.modals.edit = true\n    },\n\n    onEditClicked(statusAutomation) {\n      this.statusAutomationToEdit = statusAutomation\n      this.errors.edit = false\n      this.modals.edit = true\n    },\n\n    onDeleteClicked(statusAutomation) {\n      this.statusAutomationToDelete = statusAutomation\n      this.errors.del = false\n      this.modals.del = true\n    }\n  },\n\n  watch: {\n    '$route.query.tab'() {\n      this.activeTab = this.$route.query.tab || 'active'\n    }\n  },\n\n  head() {\n    return {\n      title: `${this.$t('status_automations.title')} - Kitsu`\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.status-automation-list {\n  margin-top: 0;\n}\n</style>\n"],"names":["_sfc_main","modalMixin","Combobox","ComboboxBoolean","ComboboxStatus","ComboboxTaskType","ModalFooter","mapGetters","status","fieldType","entityTaskTypes","entityType","outFieldType","_hoisted_1","_hoisted_2","_hoisted_5","_hoisted_7","_hoisted_8","_hoisted_9","_hoisted_10","_createElementBlock","_normalizeClass","$props","_createElementVNode","_ctx","$options","_hoisted_3","_toDisplayString","_hoisted_4","_cache","_withModifiers","_openBlock","_hoisted_6","$data","_createBlock","_component_combobox","$event","_createVNode","_component_combobox_task_type","archived","_component_combobox_status","_createCommentVNode","_hoisted_11","_component_combobox_boolean","_component_modal_footer","DeleteModal","EditStatusAutomationModal","ListPageHeader","RouteTabs","StatusAutomationList","statusAutomation","mapActions","form","action","err","name","stringHelpers","entries","csv","_component_list_page_header","_component_route_tabs","_component_status_automation_list","_component_edit_status_automation_modal","_component_delete_modal"],"mappings":"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"}