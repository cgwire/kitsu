import{_ as v,a as C,q as w,T as D,a5 as $,az as P,cK as S,r,c as m,o as p,e as a,f as d,d as f,t as c,d9 as N,w as b,k as q,m as A,da as B,aa as L,ab as g,ac as x,cL as V}from"./index-DGeRRnsw.js";import{L as M}from"./ListPageHeader-BFLCMjhw.js";import{R as I}from"./RouteTabs-BNxNjHHQ.js";import{B as K}from"./BooleanCell-BxuNTf-W.js";const R={name:"task-type-list",components:{draggable:S,BooleanCell:K,DepartmentName:P,RowActionsCell:$,TableInfo:D,TaskTypeCell:w},props:{entries:{type:Array,default:()=>[]},isError:{type:Boolean,default:!1},isLoading:{type:Boolean,default:!1}},emits:["delete-clicked","edit-clicked","update-priorities"],data(){return{items:[]}},computed:{...C(["getDepartment"])},methods:{updatePriority(){const e=this.items,t=[];e.forEach((i,o)=>{o+=1;const s={id:i.id,name:i.name,priority:String(o)};i.priority=o,t.push(s)}),this.$emit("update-priorities",t)},isEmpty(e){return e==null||e===""}},watch:{entries:{deep:!0,immediate:!0,handler(){this.items=JSON.parse(JSON.stringify(this.entries))}}}},U={class:"data-list"},z={class:"datatable-wrapper"},H={class:"datatable"},J={key:0,class:"datatable-head"},O={scope:"col",class:"department"},F={scope:"col",class:"name"},G={scope:"col",class:"short_name"},Y={scope:"col",class:"allow-timelog"},j={scope:"col",class:"description"},Q={class:"datatable-row tasktype-item"},W={class:"department"},X={class:"short_name"},Z={class:"empty"},ee={scope:"rowgroup",colspan:"6"},te={class:"text"},se={key:0,class:"has-text-centered nb-task-types"};function ie(e,t,i,o,s,l){const y=r("department-name"),h=r("task-type-cell"),_=r("boolean-cell"),k=r("row-actions-cell"),u=r("draggable"),T=r("table-info");return p(),m("div",U,[a("div",z,[a("table",H,[i.entries.length>0?(p(),m("thead",J,[a("tr",null,[a("th",O,c(e.$t("task_types.fields.department")),1),a("th",F,c(e.$t("task_types.fields.name")),1),a("th",G,c(e.$t("task_types.fields.short_name")),1),a("th",Y,c(e.$t("task_types.fields.allow_timelog")),1),a("th",j,c(e.$t("task_types.fields.description")),1),t[1]||(t[1]=a("th",{scope:"col",class:"actions"},null,-1))])])):f("",!0),d(u,{class:"datatable-body","item-key":"id",tag:"tbody",onEnd:l.updatePriority,modelValue:s.items,"onUpdate:modelValue":t[0]||(t[0]=n=>s.items=n)},N({item:b(({element:n})=>[a("tr",Q,[a("td",W,[l.isEmpty(n.department_id)?f("",!0):(p(),q(y,{key:0,department:e.getDepartment(n.department_id)},null,8,["department"]))]),d(h,{class:"name","task-type":n},null,8,["task-type"]),a("td",X,c(n.short_name),1),d(_,{class:"allow-timelog",value:n.allow_timelog},null,8,["value"]),a("td",null,c(n.description),1),d(k,{"task-type-id":n.id,onDeleteClicked:E=>e.$emit("delete-clicked",n),onEditClicked:E=>e.$emit("edit-clicked",n)},null,8,["task-type-id","onDeleteClicked","onEditClicked"])])]),_:2},[i.entries.length?void 0:{name:"footer",fn:b(()=>[a("tr",Z,[a("th",ee,[a("span",te,c(e.$t("task_types.no_task_types")),1)])])]),key:"0"}]),1032,["onEnd","modelValue"])])]),d(T,{"is-loading":i.isLoading,"is-error":i.isError},null,8,["is-loading","is-error"]),i.entries.length>0?(p(),m("p",se,c(i.entries.length)+" "+c(e.$tc("task_types.number",i.entries.length)),1)):f("",!0)])}const ae=v(R,[["render",ie],["__scopeId","data-v-2c1e7ea8"]]),le={name:"task-types",components:{DeleteModal:L,EditTaskTypeModal:B,ListPageHeader:M,RouteTabs:I,TaskTypeList:ae},data(){return{activeTab:"active",entityTab:"assets",errors:{taskTypes:!1,departments:!1,edit:!1,del:!1},loading:{taskTypes:!1,departments:!1,edit:!1,del:!1},modals:{del:!1,edit:!1},tabs:[{name:"active",label:this.$t("main.active")},{name:"archived",label:this.$t("main.archived")}],entityTabs:[{name:"assets",label:this.$t("assets.title")},{name:"shots",label:this.$t("shots.title")},{name:"sequences",label:this.$t("sequences.title")},{name:"episodes",label:this.$t("episodes.title")},{name:"edits",label:this.$t("edits.title")}],taskTypeToDelete:{color:"#999999"},taskTypeToEdit:null}},computed:{...C(["archivedTaskTypes","departmentMap","taskTypes"]),forEntity(){return g.capitalize(this.entityTab.substring(0,this.entityTab.length-1))},isActiveTab(){return this.activeTab==="active"},listTaskTypes(){const e=this.isActiveTab?this.taskTypes:this.archivedTaskTypes,t=this.entityTab.substring(0,this.entityTab.length-1);return e.filter(i=>i.for_entity.toLowerCase()===t)}},mounted(){this.activeTab=this.$route.query.tab||"active",this.entityTab=this.$route.query.entity||"assets",this.loading.taskTypes=!0,this.errors.taskTypes=!1,this.loading.departments=!0,this.errors.departments=!1,this.loadDepartments().then(()=>{this.loading.departments=!1}).catch(e=>{console.error(e),this.loading.departments=!1,this.errors.departments=!0}),this.loadTaskTypes().then(()=>{this.loading.taskTypes=!1}).catch(e=>{console.error(e),this.loading.taskTypes=!1,this.errors.taskTypes=!0})},methods:{...A(["editTaskType","deleteTaskType","loadTaskTypes","loadDepartments"]),confirmEditTaskType(e){let t="newTaskType";this.taskTypeToEdit&&this.taskTypeToEdit.id&&(t="editTaskType",e.id=this.taskTypeToEdit.id),this.loading.edit=!0,this.errors.edit=!1,this.$store.dispatch(t,e).then(()=>{this.loading.edit=!1,this.modals.edit=!1}).catch(i=>{console.error(i),this.loading.edit=!1,this.errors.edit=!0})},updatePriorities(e){e.forEach(t=>{this.$store.commit("EDIT_TASK_TYPE_END",t)}),this.savePriorities(e)},savePriorities(e){const t=new Date().getTime();this.lastCall=this.lastCall||0,t-this.lastCall>1e3&&!this.isSaving?(this.lastCall=t,this.isSaving=!0,V.runPromiseMapAsSeries(e,this.editTaskType).then(()=>{this.isSaving=!1,this.newSaveCall&&this.savePriorities(e)})):this.newSaveCall=!0},confirmDeleteTaskType(){this.loading.del=!0,this.errors.del=!1,this.deleteTaskType(this.taskTypeToDelete).then(()=>{this.loading.del=!1,this.modals.del=!1}).catch(e=>{console.error(e),this.loading.del=!1,this.errors.del=!0})},deleteText(){const e=this.taskTypeToDelete;return e?this.$t("task_types.delete_text",{name:e.name}):""},onDeleteClicked(e){this.taskTypeToDelete=e,this.modals.del=!0},onEditClicked(e){this.taskTypeToEdit=e,this.modals.edit=!0},onExportClicked(){const e=g.slugify(this.$t("task_types.title")),i=[[this.$t("main.type"),this.$t("task_types.fields.dedicated_to"),this.$t("task_types.fields.department"),this.$t("task_types.fields.name"),this.$t("task_types.fields.description"),this.$t("task_types.fields.color"),this.$t("task_types.fields.allow_timelog")]].concat(this.taskTypes.map(o=>[o.type,o.for_entity,this.departmentMap.get(o.department_id)?.name,o.name,o.description,o.color,o.allow_timelog]));x.buildCsvFile(e,i)},onNewClicked(){this.taskTypeToEdit={color:"#999999"},this.modals.edit=!0}},watch:{"$route.query"(){this.activeTab=this.$route.query.tab||"active",this.entityTab=this.$route.query.entity||"assets"}},head(){return{title:`${this.$t("task_types.title")} - Kitsu`}}},oe={class:"task-types page fixed-page"};function ne(e,t,i,o,s,l){const y=r("list-page-header"),h=r("route-tabs"),_=r("task-type-list"),k=r("edit-task-type-modal"),u=r("delete-modal");return p(),m("div",oe,[d(y,{title:e.$t("task_types.library_title"),"new-entry-label":e.$t("task_types.new_task_type"),"is-exportable":l.isActiveTab,onExportClicked:l.onExportClicked,onNewClicked:l.onNewClicked},null,8,["title","new-entry-label","is-exportable","onExportClicked","onNewClicked"]),d(h,{class:"mt2","active-tab":s.activeTab,tabs:s.tabs},null,8,["active-tab","tabs"]),d(h,{"active-tab":s.entityTab,tabs:s.entityTabs,"route-key":"entity"},null,8,["active-tab","tabs"]),d(_,{entries:l.listTaskTypes,"is-loading":s.loading.taskTypes||s.loading.departments,"is-error":s.errors.taskTypes||s.errors.departments,onUpdatePriorities:l.updatePriorities,onEditClicked:l.onEditClicked,onDeleteClicked:l.onDeleteClicked},null,8,["entries","is-loading","is-error","onUpdatePriorities","onEditClicked","onDeleteClicked"]),d(k,{active:s.modals.edit,"for-entity":l.forEntity,"is-loading":s.loading.edit,"is-error":s.errors.edit,"task-type-to-edit":s.taskTypeToEdit,onCancel:t[0]||(t[0]=T=>s.modals.edit=!1),onConfirm:l.confirmEditTaskType},null,8,["active","for-entity","is-loading","is-error","task-type-to-edit","onConfirm"]),d(u,{active:s.modals.del,"is-loading":s.loading.del,"is-error":s.errors.del,text:l.deleteText(),"error-text":e.$t("task_types.delete_error"),onCancel:t[1]||(t[1]=T=>s.modals.del=!1),onConfirm:l.confirmDeleteTaskType},null,8,["active","is-loading","is-error","text","error-text","onConfirm"])])}const he=v(le,[["render",ne]]);export{he as default};
//# sourceMappingURL=TaskTypes-BnyW_MnW.js.map
