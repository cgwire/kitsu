{"version":3,"file":"SequenceStats-Dx5ieJcl.js","sources":["../../src/components/lists/SequenceStatsList.vue","../../src/components/pages/SequenceStats.vue"],"sourcesContent":["<template>\n  <div class=\"data-list\">\n    <div class=\"datatable-wrapper\" ref=\"body\" @scroll.passive=\"onBodyScroll\">\n      <table class=\"datatable\">\n        <thead class=\"datatable-head\">\n          <tr>\n            <th scope=\"col\" class=\"name datatable-row-header\" ref=\"th-sequence\">\n              {{ $t('shots.fields.sequence') }}\n            </th>\n            <th scope=\"col\" class=\"validation\">{{ $t('main.all') }}</th>\n            <template v-if=\"!isLoading\">\n              <th\n                scope=\"col\"\n                class=\"validation validation-cell\"\n                :key=\"columnId\"\n                v-for=\"columnId in validationColumns\"\n              >\n                <div\n                  class=\"flexrow validation-content\"\n                  :style=\"getValidationStyle(columnId)\"\n                >\n                  <router-link\n                    class=\"flexrow-item ellipsis\"\n                    :title=\"taskTypeMap.get(columnId).name\"\n                    :to=\"taskTypePath(columnId)\"\n                    v-if=\"!isCurrentUserClient\"\n                  >\n                    {{ taskTypeMap.get(columnId).name }}\n                  </router-link>\n                  <span\n                    class=\"flexrow-item ellipsis\"\n                    :title=\"taskTypeMap.get(columnId).name\"\n                    v-else\n                  >\n                    {{ taskTypeMap.get(columnId).name }}\n                  </span>\n                </div>\n              </th>\n            </template>\n            <th scope=\"col\" class=\"actions\"></th>\n          </tr>\n        </thead>\n        <tbody class=\"datatable-body\" v-if=\"!isLoading\">\n          <tr class=\"all-line datatable-row\" v-if=\"showAll && !isEmptyList\">\n            <th scope=\"row\" class=\"name datatable-row-header\">\n              {{ $t('sequences.all_sequences') }}\n            </th>\n\n            <stats-cell\n              class=\"all-validation\"\n              :colors=\"chartColors('all', 'all')\"\n              :data=\"chartData('all', 'all')\"\n              :frames-data=\"chartData('all', 'all', 'frames')\"\n              :drawings-data=\"chartData('all', 'all', 'drawings')\"\n              :count-mode=\"countMode\"\n              :display-mode=\"displayMode\"\n            />\n\n            <stats-cell\n              :style=\"getValidationStyle(columnId)\"\n              :key=\"'all-' + columnId\"\n              :colors=\"chartColors('all', columnId)\"\n              :data=\"chartData('all', columnId)\"\n              :frames-data=\"chartData('all', columnId, 'frames')\"\n              :drawings-data=\"chartData('all', columnId, 'drawings')\"\n              :count-mode=\"countMode\"\n              :display-mode=\"displayMode\"\n              v-for=\"columnId in validationColumns\"\n            />\n\n            <td class=\"actions\"></td>\n          </tr>\n\n          <tr class=\"datatable-row\" :key=\"entry.id\" v-for=\"entry in entryStats\">\n            <td scope=\"row\" class=\"name datatable-row-header\">\n              {{ entry.name }}\n            </td>\n\n            <stats-cell\n              :colors=\"chartColors(entry.id, 'all')\"\n              :data=\"chartData(entry.id, 'all')\"\n              :frames-data=\"chartData(entry.id, 'all', 'frames')\"\n              :drawings-data=\"chartData(entry.id, 'all', 'drawings')\"\n              :count-mode=\"countMode\"\n              :display-mode=\"displayMode\"\n              v-if=\"isStats(entry.id, 'all')\"\n            />\n            <td v-else></td>\n\n            <template\n              :key=\"entry.id + '-' + columnId\"\n              v-for=\"columnId in validationColumns\"\n            >\n              <stats-cell\n                :key=\"entry.id + columnId\"\n                :style=\"getValidationStyle(columnId)\"\n                :colors=\"chartColors(entry.id, columnId)\"\n                :data=\"chartData(entry.id, columnId)\"\n                :frames-data=\"chartData(entry.id, columnId, 'frames')\"\n                :drawings-data=\"chartData(entry.id, columnId, 'drawings')\"\n                :count-mode=\"countMode\"\n                :display-mode=\"displayMode\"\n                v-if=\"isStats(entry.id, columnId)\"\n              />\n              <td :style=\"getValidationStyle(columnId)\" v-else></td>\n            </template>\n\n            <td class=\"actions\"></td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n\n    <table-info :is-loading=\"isLoading\" :is-error=\"isError\" />\n\n    <div\n      class=\"has-text-centered\"\n      v-if=\"isEmptyList && !isCurrentUserClient && !isLoading\"\n    >\n      <p class=\"info\">\n        <img src=\"../../assets/illustrations/empty_shot.png\" />\n      </p>\n      <p class=\"info\">{{ $t('sequences.empty_list') }}</p>\n    </div>\n    <div\n      class=\"has-text-centered\"\n      v-if=\"isEmptyList && isCurrentUserClient && !isLoading\"\n    >\n      <p class=\"info\">\n        <img src=\"../../assets/illustrations/empty_shot.png\" />\n      </p>\n      <p class=\"info\">{{ $t('sequences.empty_list_client') }}</p>\n    </div>\n\n    <p class=\"has-text-centered nb-sequences\" v-if=\"!isEmptyList && !isLoading\">\n      {{ displayedSequencesLength }}\n      {{ $tc('sequences.number', displayedSequencesLength) }}\n    </p>\n  </div>\n</template>\n\n<script>\nimport { mapGetters } from 'vuex'\n\nimport { getChartColors, getChartData } from '@/lib/stats'\n\nimport { entityListMixin } from '@/components/mixins/entity_list'\n\nimport TableInfo from '@/components/widgets/TableInfo.vue'\nimport StatsCell from '@/components/cells/StatsCell.vue'\n\nexport default {\n  name: 'sequence-stats-list',\n\n  mixins: [entityListMixin],\n\n  components: {\n    StatsCell,\n    TableInfo\n  },\n\n  props: {\n    countMode: {\n      type: String,\n      default: 'count'\n    },\n    displayMode: {\n      type: String,\n      default: 'pie'\n    },\n    entries: {\n      type: Array,\n      default: () => []\n    },\n    isLoading: {\n      type: Boolean,\n      default: false\n    },\n    isError: {\n      type: Boolean,\n      default: false\n    },\n    sequenceStats: {\n      type: Object,\n      default: () => {}\n    },\n    showAll: {\n      type: Boolean,\n      default: false\n    },\n    validationColumns: {\n      type: Array,\n      default: () => []\n    }\n  },\n\n  computed: {\n    ...mapGetters([\n      'currentProduction',\n      'currentEpisode',\n      'displayedSequencesLength',\n      'isCurrentUserClient',\n      'isTVShow',\n      'sequenceSearchText',\n      'taskTypeMap'\n    ]),\n\n    entryStats() {\n      return this.entries.filter(entry => this.isEntryStats(entry.id))\n    },\n\n    isEmptyList() {\n      return (\n        this.entries &&\n        this.entries.length === 0 &&\n        !this.isLoading &&\n        !this.isError &&\n        (!this.sequenceSearchText || this.sequenceSearchText.length === 0)\n      )\n    }\n  },\n\n  methods: {\n    chartColors(entryId, columnId) {\n      return getChartColors(this.sequenceStats, entryId, columnId)\n    },\n\n    chartData(entryId, columnId, dataType = 'count') {\n      return getChartData(this.sequenceStats, entryId, columnId, dataType)\n    },\n\n    isStats(entryId, columnId) {\n      return (\n        this.sequenceStats[entryId] && this.sequenceStats[entryId][columnId]\n      )\n    },\n\n    isEntryStats(entryId) {\n      if (!this.sequenceStats[entryId] && this.sequenceSearchText) return false\n      if (!this.sequenceStats[entryId]) return true\n      let isStats = false\n      Object.keys(this.sequenceStats[entryId]).forEach(statKey => {\n        isStats = isStats || this.sequenceStats[entryId][statKey]\n      })\n      return isStats\n    },\n\n    editPath(sequenceId) {\n      return this.getPath('edit-sequence', sequenceId)\n    },\n\n    deletePath(sequenceId) {\n      return this.getPath('delete-sequence', sequenceId)\n    },\n\n    taskTypePath(taskTypeId) {\n      const route = {\n        name: 'task-type',\n        params: {\n          production_id: this.currentProduction.id,\n          task_type_id: taskTypeId,\n          type: 'shots'\n        }\n      }\n\n      if (this.isTVShow && this.currentEpisode) {\n        route.name = 'episode-task-type'\n        route.params.episode_id = this.currentEpisode.id\n      }\n\n      return route\n    },\n\n    getPath(section, sequenceId) {\n      const route = {\n        name: section,\n        params: {\n          production_id: this.currentProduction.id\n        }\n      }\n\n      if (this.isTVShow && this.currentEpisode) {\n        route.name = `episode-${section}`\n        route.params.episode_id = this.currentEpisode.id\n      }\n\n      if (sequenceId) {\n        route.params.sequence_id = sequenceId\n      }\n      return route\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.datatable-body tr:first-child th,\n.datatable-body tr:first-child td {\n  border-top: 0;\n}\n.episode {\n  min-width: 100px;\n  width: 100px;\n}\n\n.name {\n  min-width: 150px;\n  width: 150px;\n  font-weight: bold;\n}\n\n.name a {\n  color: inherit;\n}\n\ntd.name {\n  font-size: 1.2em;\n}\n\n.description {\n  min-width: 200px;\n  width: 200px;\n}\n\n.validation {\n  min-width: 170px;\n  max-width: 170px;\n  width: 170px;\n  word-wrap: break-word;\n}\n\n.actions {\n  min-width: 100px;\n}\n\nth.actions {\n  padding: 0.4em;\n}\n\n.info img {\n  max-width: 80vh;\n}\n\n.actions {\n  width: 100%;\n  min-width: 150px;\n}\n</style>\n","<template>\n  <div class=\"sequences page fixed-page\">\n    <div class=\"sequence-list-header page-header flexrow\">\n      <search-field\n        class=\"flexrow-item mt1\"\n        ref=\"sequence-search-field\"\n        :can-save=\"true\"\n        @change=\"onSearchChange\"\n        @save=\"saveSearchQuery\"\n        placeholder=\"ex: e01 s01 anim=wip\"\n      />\n      <combobox\n        class=\"mb0 flexrow-item\"\n        :label=\"$t('statistics.display_mode')\"\n        locale-key-prefix=\"statistics.\"\n        :options=\"displayModeOptions\"\n        v-model=\"displayMode\"\n      />\n      <combobox\n        class=\"mb0 flexrow-item\"\n        :label=\"$t('statistics.count_mode')\"\n        locale-key-prefix=\"statistics.\"\n        :options=\"countModeOptions\"\n        v-model=\"countMode\"\n      />\n      <span class=\"filler\"> </span>\n      <button-simple\n        class=\"flexrow-item\"\n        icon=\"refresh\"\n        :title=\"$t('main.reload')\"\n        @click=\"reloadData\"\n      />\n      <button-simple\n        class=\"flexrow-item\"\n        icon=\"download\"\n        :title=\"$t('main.csv.export_file')\"\n        @click=\"exportStatisticsToCsv\"\n      />\n    </div>\n\n    <div class=\"query-list mt1\">\n      <search-query-list\n        :queries=\"sequenceSearchQueries\"\n        type=\"sequenceStat\"\n        @remove-search=\"removeSearchQuery\"\n      />\n    </div>\n\n    <sequence-stats-list\n      ref=\"sequence-list\"\n      :count-mode=\"countMode\"\n      :display-mode=\"displayMode\"\n      :entries=\"displayedSequences\"\n      :is-loading=\"isShotsLoading || initialLoading\"\n      :is-error=\"isShotsLoadingError\"\n      :validation-columns=\"shotValidationColumns\"\n      :sequence-stats=\"sequenceStats\"\n      :show-all=\"!sequenceSearchText\"\n      @field-changed=\"onFieldChanged\"\n      @scroll=\"saveScrollPosition\"\n    />\n  </div>\n</template>\n\n<script>\nimport moment from 'moment'\nimport { mapGetters, mapActions } from 'vuex'\n\nimport { searchMixin } from '@/components/mixins/search'\n\nimport csv from '@/lib/csv'\nimport stringHelpers from '@/lib/string'\n\nimport ButtonSimple from '@/components/widgets/ButtonSimple.vue'\nimport Combobox from '@/components/widgets/Combobox.vue'\nimport SearchField from '@/components/widgets/SearchField.vue'\nimport SearchQueryList from '@/components/widgets/SearchQueryList.vue'\nimport SequenceStatsList from '@/components/lists/SequenceStatsList.vue'\n\nexport default {\n  name: 'sequence-stats',\n\n  mixins: [searchMixin],\n\n  components: {\n    ButtonSimple,\n    Combobox,\n    SearchField,\n    SearchQueryList,\n    SequenceStatsList\n  },\n\n  data() {\n    return {\n      countMode: 'count',\n      displayMode: 'pie',\n      initialLoading: true,\n      countModeOptions: [\n        { label: 'shots', value: 'count' },\n        { label: 'frames', value: 'frames' }\n      ],\n      displayModeOptions: [\n        { label: 'pie', value: 'pie' },\n        { label: 'count', value: 'count' }\n      ],\n      loading: {\n        savingSearch: false\n      }\n    }\n  },\n\n  mounted() {\n    this.setCountOptions()\n    this.loadShots(() => {\n      this.initSequences()\n        .then(() => {\n          this.initialLoading = false\n          setTimeout(() => {\n            this.setSearchFromUrl()\n            this.onSearchChange()\n          }, 100) // wait for data to be ready\n        })\n        .catch(err => console.error(err))\n    })\n  },\n\n  computed: {\n    ...mapGetters([\n      'currentEpisode',\n      'currentProduction',\n      'displayedSequences',\n      'isPaperProduction',\n      'isShotsLoading',\n      'isShotsLoadingError',\n      'isTVShow',\n      'searchSequenceFilters',\n      'sequenceMap',\n      'sequencesPath',\n      'sequenceStats',\n      'sequenceSearchText',\n      'sequenceSearchQueries',\n      'sequenceListScrollPosition',\n      'shotValidationColumns',\n      'taskTypeMap',\n      'taskStatusMap'\n    ]),\n\n    searchField() {\n      return this.$refs['sequence-search-field']\n    }\n  },\n\n  methods: {\n    ...mapActions([\n      'computeSequenceStats',\n      'initSequences',\n      'loadShots',\n      'removeSequenceSearch',\n      'saveSequenceSearch',\n      'setSequenceListScrollPosition',\n      'setSequenceStatsSearch'\n    ]),\n\n    reloadData() {\n      this.initialLoading = true\n      this.loadShots(() => {\n        this.initialLoading = false\n        this.computeSequenceStats()\n      })\n    },\n\n    setDefaultListScrollPosition() {\n      this.$refs['sequence-list']?.setScrollPosition(\n        this.sequenceListScrollPosition\n      )\n    },\n\n    navigateToList() {\n      this.$router.push(this.sequencesPath)\n    },\n\n    onSearchChange() {\n      const searchQuery = this.$refs['sequence-search-field']?.getValue()\n      this.setSearchInUrl()\n      this.setSequenceStatsSearch(searchQuery)\n    },\n\n    saveSearchQuery(searchQuery) {\n      if (this.loading.savingSearch) {\n        return\n      }\n      this.loading.savingSearch = true\n      this.saveSequenceSearch(searchQuery)\n        .catch(console.error)\n        .finally(() => {\n          this.loading.savingSearch = false\n        })\n    },\n\n    removeSearchQuery(searchQuery) {\n      this.removeSequenceSearch(searchQuery).catch(console.error)\n    },\n\n    saveScrollPosition(scrollPosition) {\n      this.setSequenceListScrollPosition(scrollPosition)\n    },\n\n    exportStatisticsToCsv() {\n      const nameData = [\n        moment().format('YYYYMMDD'),\n        this.currentProduction.name,\n        'sequences',\n        'statistics'\n      ]\n      if (this.currentEpisode) {\n        nameData.splice(2, 0, this.currentEpisode.name)\n      }\n      const name = stringHelpers.slugify(nameData.join('_'))\n      csv.generateStatReports(\n        name,\n        this.sequenceStats,\n        this.taskTypeMap,\n        this.taskStatusMap,\n        this.sequenceMap,\n        this.countMode,\n        this.currentProduction\n      )\n    },\n\n    onFieldChanged({ entry, fieldName, value }) {\n      const data = { id: entry.id }\n      data[fieldName] = value\n      this.editSequence(data)\n    },\n\n    setCountOptions() {\n      if (this.isPaperProduction) {\n        this.countModeOptions = [\n          { label: 'shots', value: 'count' },\n          { label: 'drawings', value: 'drawings' }\n        ]\n      } else {\n        this.countModeOptions = [\n          { label: 'shots', value: 'count' },\n          { label: 'frames', value: 'frames' }\n        ]\n      }\n      this.countMode = this.countModeOptions[0].value\n    }\n  },\n\n  watch: {\n    currentProduction() {\n      this.$refs['sequence-search-field'].setValue('')\n      this.$store.commit('SET_SEQUENCE_LIST_SCROLL_POSITION', 0)\n      this.setCountOptions()\n\n      if (!this.isTVShow) {\n        this.loadShots(() => {\n          this.initSequences().catch(err => console.error(err))\n        })\n      }\n    },\n\n    currentEpisode() {\n      if (this.isTVShow && this.currentEpisode) {\n        this.loadShots(() => {\n          this.initSequences()\n            .then(() => {\n              this.initialLoading = false\n            })\n            .catch(err => console.error(err))\n        })\n      }\n    },\n\n    searchSequenceFilters: {\n      deep: true,\n      handler() {\n        this.computeSequenceStats()\n      }\n    },\n\n    '$route.query.search'(search) {\n      this.searchField?.setValue(search)\n      this.onSearchChange()\n    }\n  },\n\n  head() {\n    if (this.isTVShow) {\n      return {\n        title:\n          `${this.currentProduction ? this.currentProduction.name : ''}` +\n          ` - ${this.currentEpisode ? this.currentEpisode.name : ''}` +\n          ` | ${this.$t('sequences.title')} - Kitsu`\n      }\n    } else {\n      return {\n        title:\n          `${this.currentProduction ? this.currentProduction.name : ''}` +\n          ` | ${this.$t('sequences.title')} - Kitsu`\n      }\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.mb0 {\n  margin-bottom: 0;\n}\n</style>\n"],"names":["_sfc_main","entityListMixin","StatsCell","TableInfo","mapGetters","entry","entryId","columnId","getChartColors","dataType","getChartData","isStats","statKey","sequenceId","taskTypeId","route","section","_hoisted_1","_hoisted_2","_hoisted_3","_hoisted_5","_hoisted_12","_hoisted_14","_openBlock","_createElementBlock","_createElementVNode","_cache","args","_ctx","_hoisted_4","_toDisplayString","$props","_createCommentVNode","_Fragment","_renderList","_normalizeStyle","_createBlock","_component_router_link","$options","_withCtx","_createTextVNode","_hoisted_6","_hoisted_7","_hoisted_8","_createVNode","_component_stats_cell","_hoisted_9","_hoisted_10","_component_table_info","_hoisted_11","_imports_0","_hoisted_13","_hoisted_15","searchMixin","ButtonSimple","Combobox","SearchField","SearchQueryList","SequenceStatsList","err","mapActions","searchQuery","scrollPosition","nameData","moment","name","stringHelpers","csv","fieldName","value","data","search","_component_search_field","_component_combobox","$data","$event","_component_button_simple","_component_search_query_list","_component_sequence_stats_list"],"mappings":"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"}